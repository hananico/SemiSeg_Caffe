name: "segnet_encode_decode"
layer {
  name: "data"
  type: "DenseImageData"
  top: "data"
  top: "label"
  dense_image_data_param {
    source: "SegNet/SiftFlow/train_quad.txt"	# Change this to the absolute path to your data file
    batch_size: 16   			# Change this number to a batch size that will fit on your GPU
    #shuffle: true
  }
  
}

layer {
  name: "data_n"
  type: "DenseImageData"
  top: "data_n"
  top: "label_n"
  dense_image_data_param {
    source: "SegNet/SiftFlow/train_quad.txt"	# Change this to the absolute path to your data file
    batch_size: 16  			# Change this number to a batch size that will fit on your GPU
    #shuffle: true
  }
  
}
layer {
    name: "silence"
    type: "Silence"
    bottom: "label_n"
 include {
    phase: TRAIN
  }
}
layer{
  name: "gauss_noise"
  type: "DummyData"
  dummy_data_param{
    data_filler{
      type:"gaussian"
      std: 5
    }
    shape:{
      dim: 16
      dim: 3
      dim: 256
      dim: 256
    }
  }
  top: "gauss_noise"
  include {
    phase: TRAIN
  }
}


layer{
  name: "noise_drop"
  type: "Dropout"
  bottom: "gauss_noise"
  top: "gauss_noise"
  include {
    phase: TRAIN
  }
  dropout_param {
     dropout_ratio: 0.9
  }
}


layer {
  name: "add_noise"
  type: "Eltwise"
  bottom: "data_n"
  bottom: "gauss_noise"
  top: "data_n"
  include {
    phase: TRAIN
  }
  eltwise_param {
    operation:SUM
  }
}

 

#layer {
#  name: "data2"
#  type: "ImageData"
#  top: "data2"
#  top: "label2"
#  image_data_param {
#    source: "SegNet/SiftFlow/images.txt"    # Change this to the absolute path to your data file
#    batch_size: 1                       # Change this number to a batch size that will fit on your GPU
#    #shuffle: true
#  }
#}
layer {
  name: "norm"
  type: "LRN"
  bottom: "data"
  top: "norm"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "norm"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "conv1_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "conv2_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "conv3_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  top: "pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "conv4_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}

layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  top: "pool4_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "upsample4"
  type: "Upsample"
  bottom: "pool4"
  bottom: "pool4_mask"
  top: "upsample4"
  upsample_param {
    scale: 2
    upsample_h: 32
    upsample_w: 32
  }
}
layer {
  name: "conv_decode4"
  type: "Convolution"
  bottom: "upsample4"
  top: "conv_decode4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode4"
  top: "conv_decode4"
  name: "conv_decode4_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "conv_decode4"
  bottom: "pool3_mask"
  top: "upsample3"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode3"
  type: "Convolution"
  bottom: "upsample3"
  top: "conv_decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode3"
  top: "conv_decode3"
  name: "conv_decode3_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "conv_decode3"
  bottom: "pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode2"
  top: "conv_decode2"
  name: "conv_decode2_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2"
  bottom: "pool1_mask"
  top: "upsample1"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode1"
  type: "Convolution"
  bottom: "upsample1"
  top: "conv_decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode1"
  top: "conv_decode1"
  name: "conv_decode1_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}

layer {
  name: "conv_classifier"
  type: "Convolution"
  bottom: "conv_decode1"
  top: "conv_classifier"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 33
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}

 
layer {
  name: "loss1"
  type: "SoftmaxWithLoss"
  bottom: "conv_classifier"
  bottom: "label"
  top: "loss1"
  softmax_param {engine: CAFFE}
  loss_weight: 0.9
}


layer {
  name: "norm_n"
  type: "LRN"
  bottom: "data_n"
  top: "norm_n"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1_n"
  type: "Convolution"
  bottom: "norm_n"
  top: "conv1_n"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv1_n"
  top: "conv1_n"
  name: "conv1_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu1_n"
  type: "ReLU"
  bottom: "conv1_n"
  top: "conv1_n"
}
layer {
  name: "pool1_n"
  type: "Pooling"
  bottom: "conv1_n"
  top: "pool1_n"
  top: "pool1_n_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_n"
  type: "Convolution"
  bottom: "pool1_n"
  top: "conv2_n"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv2_n"
  top: "conv2_n"
  name: "conv2_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu2_n"
  type: "ReLU"
  bottom: "conv2_n"
  top: "conv2_n"
}
layer {
  name: "pool2_n"
  type: "Pooling"
  bottom: "conv2_n"
  top: "pool2_n"
  top: "pool2_n_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_n"
  type: "Convolution"
  bottom: "pool2_n"
  top: "conv3_n"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv3_n"
  top: "conv3_n"
  name: "conv3_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu3_n"
  type: "ReLU"
  bottom: "conv3_n"
  top: "conv3_n"
}
layer {
  name: "pool3_n"
  type: "Pooling"
  bottom: "conv3_n"
  top: "pool3_n"
  top: "pool3_n_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_n"
  type: "Convolution"
  bottom: "pool3_n"
  top: "conv4_n"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv4_n"
  top: "conv4_n"
  name: "conv4_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "relu4_n"
  type: "ReLU"
  bottom: "conv4_n"
  top: "conv4_n"
}

layer {
  name: "pool4_n"
  type: "Pooling"
  bottom: "conv4_n"
  top: "pool4_n"
  top: "pool4_n_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


layer {
  name: "upsample4_n"
  type: "Upsample"
  bottom: "pool4_n"
  bottom: "pool4_n_mask"
  top: "upsample4_n"
  upsample_param {
    scale: 2  
    upsample_h: 32
    upsample_w: 32
  }
}
layer {
  name: "conv_decode4_n"
  type: "Convolution"
  bottom: "upsample4_n"
  top: "conv_decode4_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode4_n"
  top: "conv_decode4_n"
  name: "conv_decode4_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample3_n"
  type: "Upsample"
  bottom: "conv_decode4_n"
  bottom: "pool3_n_mask"
  top: "upsample3_n"
  upsample_param {
    scale: 2
   
  }
}
layer {
  name: "conv_decode3_n"
  type: "Convolution"
  bottom: "upsample3_n"
  top: "conv_decode3_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode3_n"
  top: "conv_decode3_n"
  name: "conv_decode3_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample2_n"
  type: "Upsample"
  bottom: "conv_decode3_n"
  bottom: "pool2_n_mask"
  top: "upsample2_n"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode2_n"
  type: "Convolution"
  bottom: "upsample2_n"
  top: "conv_decode2_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "conv_decode2_n"
  top: "conv_decode2_n"
  name: "conv_decode2_n_bn"
  type: "BN"
  bn_param {
	scale_filler {
	  type: "constant"
	  value: 1
	}
	shift_filler {
	  type: "constant"
	  value: 0.001
	}
 }
}
layer {
  name: "upsample1_n"
  type: "Upsample"
  bottom: "conv_decode2_n"
  bottom: "pool1_n_mask"
  top: "upsample1_n"
  upsample_param {
    scale: 2
  }
}


layer {
  name: "conv_decode1_n"
  type: "Convolution"
  bottom: "upsample1_n"
  top: "conv_decode1_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 3
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "deconv1neursig"
  type: "Sigmoid"
  bottom: "conv_decode1_n"
  top: "deconv1neursig"
}

layer {
  name: "loss2"
  type: "EuclideanLoss"
  bottom: "deconv1neursig"
  bottom: "data"
  top: "loss2"
  loss_weight: 0.000000002
}
 
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_classifier"
  bottom: "label"
  top: "accuracy"
  top: "per_class_accuracy"
}
